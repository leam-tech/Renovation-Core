[
    {
        "scope": "http://v11-test-erp.leam.ae:80",
        "method": "post",
        "path": "/?cmd=renovation_core.db.query.get_list_with_child&doctype=Renovation+Script&fields=name,code&filters=%7B%22target_dt%22:%22Item%22%7D&order_by=modified+desc&limit_start=0&limit_page_length=99",
        "body": "",
        "status": 200,
        "response": {
            "message": [
                {
                    "code": "// ITEM _ EDIT STOCK\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Edit Stock\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n\t\n\tcore.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, parentdoc) => {\n\t\t\tif (parentdoc.__islocal || parentdoc.__unsaved) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcore.bus.post('form_add_custom_button', {\n\t\t\t\tlabel: \"Edit Stocks\",\n\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t/*\n\t\t\t\t\tShow a modal with a warehouse Link\n\t\t\t\t\ton selection, fetch all variants, and stocks and rate for these\n\t\t\t\t\t*/\n\t\t\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\t\t\n\t\t\t\t\tlet _id = \"item_edit_stocks\";\n\t\t\t\t\tcore.bus.post('show_dialog', {\n\t\t\t\t\t\tid: _id,\n\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t{label: 'Warehouse', fieldname: 'warehouse', fieldtype: 'Link', reqd: 1, options: 'Warehouse'},\n\t\t\t\t\t\t\t{fieldname: 'items', fieldtype: 'Table', options: '__custom',\n\t\t\t\t\t\t\t\tcustomChildMeta: {\n\t\t\t\t\t\t\t\t\tdoctype: '__custom',\n\t\t\t\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t\t\t\t{label: 'Item Code', fieldname: 'item_code', fieldtype: 'Data', reqd: 1, inListView: 1},\n\t\t\t\t\t\t\t\t\t\t{label: 'Qty', fieldname: 'qty', fieldtype: 'Float', reqd: 1, inListView: 1},\n\t\t\t\t\t\t\t\t\t\t{label: 'Valuation Rate', fieldname: 'valuation_rate', fieldtype: 'Currency', reqd: 1, inListView: 1}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\twarehouse: (core, doc) => {\n\t\t\t\t\t\t\t\tdoc.items = [];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tlet itemCodes = [];\n\t\t\t\t\t\t\t\tnew Promise((res, rej) => {\n\t\t\t\t\t\t\t\t\tif (parentdoc.has_variants) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"Fetching variants\");\n\t\t\t\t\t\t\t\t\t\tcore.model.getList(\"Item\", [\"name\"], {variant_of: parentdoc.name}, \"item_code\", 0, 1000)\n\t\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Failed fetching all the variants of this template. Please try again',\n\t\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed fetching all variants\", response]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\titemCodes = response.data.map((i) => i.name);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Variants\", itemCodes);\n\t\t\t\t\t\t\t\t\t\t\tres(itemCodes);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\titemCodes = [parentdoc.name];\n\t\t\t\t\t\t\t\t\t\tres(itemCodes);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// now for each variant, get stock\n\t\t\t\t\t\t\t\t\tlet promises = [];\n\t\t\t\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\t\t\tfor (const itemCode of itemCodes) {\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\tnew Promise((res, rej) => {\n\t\t\t\t\t\t\t\t\t\t\t\tcore.call({\n\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO: Write test cases for these parameters & fn\n\t\t\t\t\t\t\t\t\t\t\t\t\tcmd: \"erpnext.stock.utils.get_stock_balance\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"item_code\": itemCode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"warehouse\": doc.warehouse,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"with_valuation_rate\": true\n\t\t\t\t\t\t\t\t\t\t\t\t}).then((r) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (r.success && r.data && r.data.message && r.data.message.length == 2) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoc.items.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem_code: itemCode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvaluation_rate: r.data.message[1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqty: r.data.message[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn Promise.all(promises)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(_ => {\n\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\tcore.ui.refreshField(_id, \"items\");\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(r => {\n\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\tmessage: 'Failed fetching stock information in given warehouse. Please try again',\n\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tconsoleWarn(r);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprimary_button: {\n\t\t\t\t\t\t\tlabel: \"Update\",\n\t\t\t\t\t\t\tonclick: (core, doc, close_dialog) => {\n\t\t\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\t\tlet s = {};\n\t\t\t\t\t\t\t\tcore.model.newDoc(\"Stock Reconciliation\").then((res) => {\n\t\t\t\t\t\t\t\t\ts = res;\n\t\t\t\t\t\t\t\t\ts.items = [];\n\t\t\t\t\t\t\t\t\tfor (const c of doc.items) {\n\t\t\t\t\t\t\t\t\t\ts.items.push({\n\t\t\t\t\t\t\t\t\t\t\twarehouse: doc.warehouse,\n\t\t\t\t\t\t\t\t\t\t\titem_code: c.item_code,\n\t\t\t\t\t\t\t\t\t\t\tvaluation_rate: c.valuation_rate,\n\t\t\t\t\t\t\t\t\t\t\tqty: c.qty\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconsole.log(\"Stock Reconciliation\", s);\n\t\t\t\t\t\t\t\t\treturn core.model.saveDoc(s);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\tif (!res.success) {\n\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\tmessage: 'Failed saving new Stock Reconciliation. Please try again',\n\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed saveDoc of Stock Reconciliation\", res]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn core.model.submitDoc(res.data);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\tif (!res.success) {\n\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\tmessage: 'Failed submitting new Stock Reconciliation. You may have to delete <a href=\"/#/Form/Stock Reconciliation/'+ encodeURIComponent(s.name) +'\">'+ s.name +'</a> manually. Please try again',\n\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed SR Submit\", res]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\tmessage: 'Successfully submitted new Stock Reconciliation <a href=\"/#/form/Stock Reconciliation/'+ encodeURIComponent(s.name) +'\">'+ s.name +'</a>',\n\t\t\t\t\t\t\t\t\t\tindicator: 'green'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tclose_dialog();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(r => {\n\t\t\t\t\t\t\t\t\tconsoleWarn(r);\n\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}",
                    "name": "Item - Edit Stock"
                },
                {
                    "code": "// Variants in Item Dashboard\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Show Variants in Dashboard\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n\t\n\tconst deleteVariant = (variant) => {\n\t\tif (confirm('Are you sure to delete this variant ?')) {\n\t\t\tcore.bus.post('spinner_service', {show: true});\n\t\t\tcore.model.deleteDoc('Item', variant)\n\t\t\t.then((response) => {\n\t\t\t\tcore.bus.post('spinner_service', {show: false});\n\t\t\t\tif (response.success) {\n\t\t\t\t\tcore.messages.next({indicator: 'green', message: 'Successfully deleted the variant'});\n\t\t\t\t\tlocation.reload();\n\t\t\t\t} else {\n\t\t\t\t\t// core will show message\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t};\n\t\n\tcore.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, doc) => {\n\t\t\t\n\t\t\t/*\n\t\t\tProceed if current doc.has_variants only\n\t\t\tgetList of Variants\n\t\t\tloop and generate an html and show.\n\t\t\t*/\n\t\t\t\n\t\t\t// get list of variants\n\t\t\tif (!doc.has_variants) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tcore.model.getList(\"Item\", [\"name\"], {variant_of: doc.name}, \"item_code\", 0, 1000)\n\t\t\t.then((response) => {\n\t\t\t\tif (!response.success) {\n\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\tmessage: 'Failed fetching all the variants of this template. Please try again',\n\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.reject([\"Failed fetching all variants of this template\", response]);\n\t\t\t\t}\n\t\t\t\tif (!response.data || response.data.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet variants = response.data.map((i) => i.name);\n\t\t\t\tif (!variants || variants.length === 0) {\n\t\t\t\t\treturn; // nevermind; dont reject\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst dash = {\n\t\t\t\t\theader: [\n\t\t\t\t\t\t{type: 'text', text: 'Variants', class: 'title'}\n\t\t\t\t\t],\n\t\t\t\t\titemsMaxHeight: '250px',\n\t\t\t\t\titems: variants,\n\t\t\t\t\titemsTemplate: [\n\t\t\t\t\t\t{type: 'link', link: (item) => ['/form/Item', item], class: 'flex-grow-1 text-secondary small'},\n\t\t\t\t\t\t{type: 'icon-btn', icon: 'nb-close', onclick: (core, item) => {\n\t\t\t\t\t\t\tdeleteVariant(item);\n\t\t\t\t\t\t}}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tcore.bus.post('form_dashboard_item', dash);\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsoleWarn(e);\n\t\t\t});\n\t\t}\n\t});\n}",
                    "name": "Item - Show variants in Dashboard"
                },
                {
                    "code": "// Item - Pricing Rule\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Pricing Rule\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n\t\n\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\tconst showMessage = (message, indicator) => {\n\t\tcore.messages.next({message: message, indicator: indicator});\n\t}\n\t\n\tlet pricing_rule_meta = null;\n\tlet targetItemCodes = []; // if length == 1 ? show single table : accordion // variants or normal..\n\tcore.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, doc) => {\n\t\t\tif (doc.__islocal || doc.__unsaved) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\n\t\t\t// get Pricing Rule meta\n\t\t\t// check permissions for all (loads meta along)\n\t\t\tcore.perm.hasPerms(\"Pricing Rule\", [\"read\", \"write\", \"create\", \"delete\"])\n\t\t\t.then(p => {\n\t\t\t\tif (p) {\n\t\t\t\t\treturn core.meta.getDocMeta(\"Pricing Rule\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(\"Not enough permissions for Pricing Rule\");\n\t\t\t\t}\t\t\t\t\t\n\t\t\t})\n\t\t\t.then((metaR) => {\n\t\t\t\tif (metaR.success) {\n\t\t\t\t\tpricing_rule_meta = metaR.data;\n\t\t\t\t\tadd_button();\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(\"Failed loading Pricing Rule docmeta; User has enough Permissions\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch((e) => consoleWarn(e));\n\t\t}\n\t});\n\tlet _doc = {};\n\tconst existingPricingRules = [];\n\tconst add_button = () => {\n\t\t// perms validated, meta loaded\n\t\tcore.bus.post('form_add_custom_button', {\n\t\t\tlabel: 'Pricing Rule',\n\t\t\tonclick: on_pricing_rule_buttonClick\n\t\t});\n\t};\n\t\n\tconst on_pricing_rule_buttonClick = (core, doc) => {\n\t\t// load variants\n\t\t// load targetItemCodes\n\t\tif (doc.has_variants) {\n\t\t\t// return so it chains to catch below\n\t\t\treturn core.model.getList(\"Item\", [\"name\"], {variant_of: doc.name}, \"item_code\", 0, 1000)\n\t\t\t.then(r => {\n\t\t\t\tif (r.success) {\n\t\t\t\t\ttargetItemCodes = r.data.map(i => i.name);\n\t\t\t\t\tshowDialog();\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(\"Failed loading Variants data\");\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\ttargetItemCodes = [doc.name];\n\t\t\tshowDialog();\n\t\t}\n\n\t}\n\t\n\tconst showDialog = () => {\n\t\t// show layout dialog with custom meta\n\t\t_doc = {};\n\t\tshowSpinner();\n\t\t\n\t\tconst promises = [];\n\t\tfor (const item_code of targetItemCodes) {\n\t\t\tpromises.push(getApplicablePricingRules(item_code))\n\t\t}\n\t\tPromise.all(promises)\n\t\t.then(r => {\n\t\t\thideSpinner();\n\t\t\tif (r.some(f => !f.success)) {\n\t\t\t\tconsole.log(r);\n\t\t\t\treturn Promise.reject([\"Failed getting existing details for items\", r.find(f => !f.success).data]);\n\t\t\t}\n\t\t\t\n\t\t\tconst targetDocs = [];\n\t\t\t// same docname is possible... so all objects SHOULD share same doc....\n\t\t\t// addToLocals first, fetch from there to have same reference\n\t\t\tfor (let i = 0; i < targetItemCodes.length; i++) {\n\t\t\t\t\n\t\t\t\tconst rules = [];\n\t\t\t\t// Promises were appended in order\n\t\t\t\t// Hope results come in order too :p\n\t\t\t\tif (r[i].data.message) // necessary, since message is empty when there is no pricing rule\n\t\t\t\t\tfor (const doc of r[i].data.message) {\n\t\t\t\t\t\t// mandatory\n\t\t\t\t\t\tdoc.doctype = \"Pricing Rule\";\n\t\t\t\t\t\tdoc.__islocal = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcore.model.addToLocals(doc);\n\t\t\t\t\t\trules.push(doc.name);\n\t\t\t\t\t\tif (existingPricingRules.indexOf(doc.name) < 0) // Set\n\t\t\t\t\t\t\texistingPricingRules.push(doc.name);\n\t\t\t\t\t}\n\t\t\t\ttargetDocs.push(rules);\n\t\t\t}\n\t\t\t\n\t\t\t// pass ref targetDocs\n\t\t\tfor (let i = 0; i < targetItemCodes.length; i++) {\n\t\t\t\tconst item_code = targetItemCodes[i];\n\t\t\t\t_doc[item_code] = [];\n\t\t\t\tfor (const docname of targetDocs[i]) {\n\t\t\t\t\t_doc[item_code].push(core.model.getFromLocals(\"Pricing Rule\", docname));\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.then(() => {\n\t\t\tcore.bus.post(\"show_dialog\", {\n\t\t\t\tid: 'item_pricing_rule',\n\t\t\t\ttitle: 'Pricing Rules',\n\t\t\t\tdoc: _doc,\n\t\t\t\tfields: getCustomLayoutFields(),\n\t\t\t\tprimary_button: {\n\t\t\t\t\tlabel: \"Save\",\n\t\t\t\t\tonclick: updatePricingRules\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t\t.catch(e => consoleWarn(e));\n\t}\n\t\n\tconst getApplicablePricingRules = (item_code) => {\n\t\treturn core.call({\n\t\t\tcmd: \"renovation_erpnext.renovation_pos.item.get_pricing_rules_on_item\",\n\t\t\titem_code: item_code\n\t\t});\n\t}\n\t\n\tconst updatePricingRules = (core, doc, close_dialog) => {\n\t\tshowSpinner();\n\t\t\n\t\t// save current\n\t\t// delete removed\n\t\t\n\t\tlet promises = [];\n\t\tlet savingDocs = [];\n\t\tfor (const item_code of targetItemCodes) {\n\t\t\tfor (const d of doc[item_code]) {\n\t\t\t\t// dont want to resave already saving doc\n\t\t\t\tif (!d.__islocal && savingDocs.indexOf(d.name) >= 0) continue;\n\t\t\t\t\n\t\t\t\tpromises.push(core.model.saveDoc(d));\n\t\t\t\tif (!d.__islocal) {\n\t\t\t\t\tsavingDocs.push(d.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// docs to delete\n\t\tfor (const docname of existingPricingRules.filter(i => savingDocs.indexOf(i) < 0)) {\n\t\t\tpromises.push(core.model.deleteDoc(\"Pricing Rule\", docname));\n\t\t}\n\t\t\n\t\tPromise.all(promises)\n\t\t.then(rr => {\n\t\t\thideSpinner();\n\t\t\tif (rr.some(r => !r.success)) {\n\t\t\t\t// some or all failed\n\t\t\t\tif (rr.every(r => !r.success)) {\n\t\t\t\t\t// all fail\n\t\t\t\t\tshowMessage(\"ALL the updation failed. Please try again later\", \"red\");\n\t\t\t\t} else {\n\t\t\t\t\t// some fail\n\t\t\t\t\tshowMessage(\"SOME of the updation failed. Please try again later\", \"red\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// all success\n\t\t\t\tclose_dialog();\n\t\t\t\tshowMessage(\"Everything updated successfully\", \"green\");\n\t\t\t}\n\t\t}); // no catch, everyone SHOULD resolve\n\t}\n\t\n\t/*\n\tReturns the layout for show_dialog\n\tBased on targetItemCodes.length, it decides if to use accordion\n\t*/\n\tconst getCustomLayoutFields = () => {\n\t\tif (targetItemCodes.length === 1) {\n\t\t\treturn [{\n\t\t\t\tfieldname: targetItemCodes[0],\n\t\t\t\tfieldtype: 'Table',\n\t\t\t\toptions: 'Pricing Rule'\n\t\t\t}];\n\t\t} else {\n\t\t\tconst fields = [];\n\t\t\tfor (const item_code of targetItemCodes) {\n\t\t\t\tfields.push({\n\t\t\t\t\tlabel: item_code,\n\t\t\t\t\tfieldtype: 'Section Break',\n\t\t\t\t\tcollapsible: 1\n\t\t\t\t});\n\t\t\t\tfields.push({\n\t\t\t\t\tfieldname: item_code,\n\t\t\t\t\tfieldtype: 'Table',\n\t\t\t\t\toptions: 'Pricing Rule'\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn fields;\n\t\t}\n\t}\n}",
                    "name": "Item - Pricing Rule"
                },
                {
                    "code": "// ITEM _ Manage Options\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Manage Options\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n\t\n\tcore.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, parentdoc) => {\n\t\t\tif (parentdoc.__islocal || parentdoc.__unsaved) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcore.bus.post('form_add_custom_button', {\n\t\t\t\tlabel: \"Manage Options\",\n\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t/*\n\t\t\t\t\tShow a modal with a warehouse Link\n\t\t\t\t\ton selection, fetch all variants, and stocks and rate for these\n\t\t\t\t\t*/\n\t\t\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\t\t\n\t\t\t\t\tlet _id = \"item_manage_options\";\n\t\t\t\t\tcore.bus.post('show_dialog', {\n\t\t\t\t\t\ttitle: \"Manage Options\",\n\t\t\t\t\t\tid: _id,\n\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t{fieldname: 'items', fieldtype: 'Table', options: 'Renovation POS Option'}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdoc: {\n\t\t\t\t\t\t\titems: doc.renovation_pos_options\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprimary_button: {\n\t\t\t\t\t\t\tlabel: \"Update\",\n\t\t\t\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t\t\t\tparentdoc.renovation_pos_options = doc.items;\n\t\t\t\t\t\t\t\tparentdoc.__unsaved = 1;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\trcore.messages.next({\n\t\t\t\t\t\t\t\t\tmessage: \"Please save the document to make the changes\",\n\t\t\t\t\t\t\t\t\tindicator: \"green\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}",
                    "name": "Item - Manage Options"
                },
                {
                    "code": "// ITEM - Edit Prices\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Edit Prices\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n\tcore.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, doc) => {\n\t\t\tif (doc.__islocal || doc.__unsaved) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcore.bus.post('form_add_custom_button', {\n\t\t\t\tlabel: \"Edit Prices\",\n\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t/*\n\t\t\t\t\t// OnClicking Edit Prices\n\t\t\t\t\t// Check if current item is a Template, a Variant or a normal Item\n\t\t\t\t\t// IF Template:\n\t\t\t\t\t//\t\tGet all the variants of this and make sections\n\t\t\t\t\t//\t\tWith tables that will have entries for Item Prices\n\t\t\t\t\t// IF Variant, or if normal Item\n\t\t\t\t\t//\t\tGet variant_of and treat it \n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\n\t\t\t\t\tlet fields = [];\n\t\t\t\t\tlet _doc = {};\n\t\t\t\t\tlet _itemCodes = [];\n\t\t\t\t\t\n\t\t\t\t\tlet parseItemWisePrice_forDoc = (priceDict) => {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t\"Item A\":\n\t\t\t\t\t\t\t\"Standard Selling\": 10\n\t\t\t\t\t\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Item A\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprice_list: \"Standard Selling\",\n\t\t\t\t\t\t\t\t\trate: 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tlet doc = {};\n\t\t\t\t\t\tif (!priceDict)\n\t\t\t\t\t\t\treturn doc;\n\t\t\t\t\t\tfor (const itemCode in priceDict) {\n\t\t\t\t\t\t\tdoc[itemCode] = [];\n\t\t\t\t\t\t\tfor (const priceList in priceDict[itemCode]) {\n\t\t\t\t\t\t\t\tdoc[itemCode].push(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tprice_list: priceList,\n\t\t\t\t\t\t\t\t\t\trate: priceDict[itemCode][priceList]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn doc;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tlet getTableField = (item_code) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tfieldname: item_code,\n\t\t\t\t\t\t\tfieldtype: 'Table',\n\t\t\t\t\t\t\toptions: '__custom',\n\t\t\t\t\t\t\tcustomChildMeta: {\n\t\t\t\t\t\t\t\tdoctype: '__custom',\n\t\t\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t\t\t{label: 'Price List', fieldname: 'price_list', fieldtype: 'Link', reqd: 1, options: 'Price List', inListView: 1},\n\t\t\t\t\t\t\t\t\t{label: 'Rate', fieldname: 'rate', fieldtype: 'Currency', reqd: 1, inListView: 1}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlet openModal = () => {\n\t\t\t\t\t\tcore.bus.post('show_dialog', {\n\t\t\t\t\t\t\tid: 'item_edit_prices',\n\t\t\t\t\t\t\ttitle: 'Edit Prices',\n\t\t\t\t\t\t\tdoc: _doc,\n\t\t\t\t\t\t\tfields: fields,\n\t\t\t\t\t\t\tprimary_button: {\n\t\t\t\t\t\t\t\tlabel: 'Save',\n\t\t\t\t\t\t\t\tonclick: (core, doc, close_dialog) => {\n\t\t\t\t\t\t\t\t\t// extract from doc to standard format\n\t\t\t\t\t\t\t\t\tlet prices = {};\n\t\t\t\t\t\t\t\t\tfor (const itemCode of _itemCodes) {\n\t\t\t\t\t\t\t\t\t\tprices[itemCode] = {};\n\t\t\t\t\t\t\t\t\t\tif (doc[itemCode]) {\n\t\t\t\t\t\t\t\t\t\t\tfor (const child of doc[itemCode]) {\n\t\t\t\t\t\t\t\t\t\t\t\tprices[itemCode][child.price_list] = child.rate;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconsole.log(\"Saving Prices\", prices);\n\t\t\t\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\t\t\tcore.erp.stock.item.setItemPrice(prices, true).then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\t\t\t\t\tclose_dialog();\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Something went wrong while saving the prices. Please try again',\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tconsoleWarn(\"Set Item Prices\", response);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (doc.has_variants) {\n\t\t\t\t\t\t// this is a template\n\t\t\t\t\t\t// get all the variants first\n\t\t\t\t\t\tcore.model.getList(\"Item\", [\"name\"], {variant_of: doc.name}, \"item_code\", 0, 1000)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\tmessage: 'Failed fetching all the variants of this template. Please try again',\n\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed fetching all variants\", response]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!response.data || response.data.length === 0) {\n\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\tmessage: 'This template doesnt have any variants to edit prices',\n\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn Promise.reject([\"Error expected\", {}]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t_itemCodes = response.data.map((i) => i.name);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// make fields for all these\n\t\t\t\t\t\t\tfor (const itemCode of _itemCodes) {\n\t\t\t\t\t\t\t\tfields.push({\n\t\t\t\t\t\t\t\t\tlabel: itemCode,\n\t\t\t\t\t\t\t\t\tfieldtype: 'Section Break',\n\t\t\t\t\t\t\t\t\tcollapsible: 1\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tfields.push(getTableField(itemCode));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log(\"Variants of this template:\", _itemCodes);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// got variants, get prices\n\t\t\t\t\t\t\treturn core.erp.stock.item.getItemPrice(_itemCodes);\n\t\t\t\t\t\t}).then((response) => {\n\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\tmessage: 'Failed fetching prices for the variants. Please try again',\n\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed fetching prices of variants\", response]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// got variants, their prices\n\t\t\t\t\t\t\tif (response.data) {\n\t\t\t\t\t\t\t\t_doc = parseItemWisePrice_forDoc(response.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlet title = \"Price for Variants\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (Array.isArray(e)) {\n\t\t\t\t\t\t\t\ttitle = e[0];\n\t\t\t\t\t\t\t\te = [1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsoleWarn(title, e);\n\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// not a template. show this single item\n\t\t\t\t\t\t// a single table is enough for this\n\t\t\t\t\t\tfields.push(\n\t\t\t\t\t\t\tgetTableField(doc.name)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\n\t\t\t\t\t\t_itemCodes = [doc.name];\n\t\t\t\t\t\t\n\t\t\t\t\t\tcore.erp.stock.item.getItemPrice(doc.name)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\tmessage: 'Failed fetching prices for this Item. Please try again',\n\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed fetching prices\", response]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (response.data) {\n\t\t\t\t\t\t\t\t_doc = parseItemWisePrice_forDoc(response.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlet title = \"Price for Variants\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (Array.isArray(e)) {\n\t\t\t\t\t\t\t\ttitle = e[0];\n\t\t\t\t\t\t\t\te = [1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsoleWarn(title, e);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}",
                    "name": "Item - Edit Prices"
                },
                {
                    "code": "// Item - Create single variant\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Create Single Variant\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n    core.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, doc) => {\n\t\t\tif (doc.__islocal || !doc.has_variants) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst _parentDoc = doc;\n\t\t\tcore.bus.post('form_add_custom_button', {\n\t\t\t\tlabel: 'Create Single Variant',\n\t\t\t\tgroup: 'Variants',\n\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t// onlick, show dialog for variant creation\n\t\t\t\t\t\n\t\t\t\t\t// if unsaved, return\n\t\t\t\t\tif (doc.__unsaved) {\n\t\t\t\t\t\tcore.messages.next('Please save your changes before you create variants.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!doc.attributes || doc.attributes.length == 0) {\n\t\t\t\t\t\tcore.messages.next({message: 'Rows in Attributes Table are mandatory to create variants from', indicator: 'red'});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\n\t\t\t\t\t// generate fields based on attributes\n\t\t\t\t\tlet fields = [];\n\t\t\t\t\tlet attrs = [];\n\t\t\t\t\t// function for each Item Attribute\n\t\t\t\t\tconst fn = (attr) => {\n\t\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tcore.model.getList(\"Item Attribute Value\", [\"attribute_value\"], {parent: attr}, 'attribute_value', 0, 1000, 'Item Attribute')\n\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\t\tlabel: attr,\n\t\t\t\t\t\t\t\t\t\t\tfieldname: attr,\n\t\t\t\t\t\t\t\t\t\t\tfieldtype: 'Select',\n\t\t\t\t\t\t\t\t\t\t\toptions: response.data.map(d => d.attribute_value).join('\\n')\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tlet promises = [];\n\t\t\t\t\tfor (const attr of doc.attributes) {\n\t\t\t\t\t\t// for each attribute, get Item Attribute values and use it for fields\n\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\tfn(attr.attribute)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tattrs.push(attr.attribute);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tPromise.all(promises)\n\t\t\t\t\t.then((fields) => {\n\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\trcore.bus.post('show_dialog', {\n\t\t\t\t\t\t\tfields: fields,\n\t\t\t\t\t\t\tid: 'item_form_create_single_variant_dialog',\n\t\t\t\t\t\t\ttitle: 'Create Single Variant',\n\t\t\t\t\t\t\tprimary_button: {\n\t\t\t\t\t\t\t\tlabel: 'Create',\n\t\t\t\t\t\t\t\tonclick: (core, doc, close_dialog) => {\n\t\t\t\t\t\t\t\t\t// doc has the values\n\t\t\t\t\t\t\t\t\t// check if similar variant with values exists\n\t\t\t\t\t\t\t\t\t// else proceed making\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconst _args = {};\n\t\t\t\t\t\t\t\t\tfor (const attr of attrs) {\n\t\t\t\t\t\t\t\t\t\t_args[attr] = doc[attr];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcore.call({\n\t\t\t\t\t\t\t\t\t\t// TODO: Write test cases for these parameters & fn\n\t\t\t\t\t\t\t\t\t\tcmd: \"erpnext.controllers.item_variant.get_variant\",\n\t\t\t\t\t\t\t\t\t\t\"template\": _parentDoc.name,\n\t\t\t\t\t\t\t\t\t\t\"args\": _args\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Failed getting info about existing variants. Please try again',\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed getting info about existing variants\", response]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (response.data.message) {\n\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'A variant with given attributes already exists: ' + response.data.message,\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Expected Error\"]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// no copies; proceed with creation\n\t\t\t\t\t\t\t\t\t\tcore.call({\n\t\t\t\t\t\t\t\t\t\t\t// TODO: Write test cases for these parameters & fn\n\t\t\t\t\t\t\t\t\t\t\tcmd: \"erpnext.controllers.item_variant.create_variant\",\n\t\t\t\t\t\t\t\t\t\t\t\"item\": _parentDoc.name,\n\t\t\t\t\t\t\t\t\t\t\t\"args\": _args\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Something went wrong while creating the variants, please try again',\n\t\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Error creating the variants\", response]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tcore.model.addToLocals(response.data.message);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Successfully created variant\", response.data.message);\n\t\t\t\t\t\t\t\t\t\t\tcore.bus.post('navigate_router', ['/form', 'Item', response.data.message.name]);\n\t\t\t\t\t\t\t\t\t\t\tclose_dialog();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please save this Item document to complete the Variant',\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'green'\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch(r => {\n\t\t\t\t\t\t\t\t\t\tconsoleWarn(r);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclose_button: {\n\t\t\t\t\t\t\t\tlabel: 'Cancel'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((r) => {\n\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\tmessage: 'Failed loading variants Item Attributes data',\n\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.warn(\"Failed loading variants Attributes data\");\n\t\t\t\t\t\tconsole.warn(r);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n    });\n}",
                    "name": "Item - Create Single Variant"
                },
                {
                    "code": "// Item - Create Multiple variant\n(core) => {\n\tconst consoleWarn = (...logs) => {\n\t\tlet error = \"Item - Create Multiple Variant\";\n\t\tlet processErrorArray = (array) => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet arg = array[i];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tprocessErrorArray(arg);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof arg !== \"string\")\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\terror += `\\n${arg}`;\n\t\t\t}\n\t\t}\n\t\tprocessErrorArray(logs);\n\t\tconsole.warn(error);\n\t};\n    core.scriptManager.addEvents(\"Item\", {\n\t\tform_setup: (core, doc) => {\n\t\t\tconst _parentDoc = doc;\n\t\t\tif (!doc.__islocal && doc.has_variants) {\n\t\t\t\tcore.bus.post('form_add_custom_button', {\n\t\t\t\t\tlabel: 'Create Multiple Variant',\n\t\t\t\t\tgroup: 'Variants',\n\t\t\t\t\tonclick: (core, doc) => {\n\t\t\t\t\t\t// onlick, show dialog for variant creation\n\t\t\t\t\t\t\n\t\t\t\t\t\t// if unsaved, return\n\t\t\t\t\t\tif (doc.__unsaved) {\n\t\t\t\t\t\t\tcore.messages.next('Please save your changes before you create variants.');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!doc.attributes || doc.attributes.length == 0) {\n\t\t\t\t\t\t\tcore.messages.next({message: 'Rows in Attributes Table are mandatory to create variants from', indicator: 'red'});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst showSpinner = () => core.bus.post('spinner_service', {show: true});\n\t\t\t\t\t\tconst hideSpinner = () => core.bus.post('spinner_service', {show: false});\n\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// generate fields based on attributes\n\t\t\t\t\t\tlet fields = [];\n\t\t\t\t\t\tlet attrs = [];\n\t\t\t\t\t\t// function for each Item Attribute\n\t\t\t\t\t\tconst fn = (attr) => {\n\t\t\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\tcore.model.getList(\"Item Attribute Value\", [\"attribute_value\"], {parent: attr}, 'attribute_value', 0, 1000, 'Item Attribute')\n\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\t\t\t\t\tlet f = []\n\t\t\t\t\t\t\t\t\t\t\tf.push({\n\t\t\t\t\t\t\t\t\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: attr,\n\t\t\t\t\t\t\t\t\t\t\t\tfieldname: attr,\n\t\t\t\t\t\t\t\t\t\t\t\tcollapsible: 1\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfor (const attr_val of response.data.map(d => d.attribute_value)) {\n\t\t\t\t\t\t\t\t\t\t\t\tf.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: attr_val,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldname: attr + '|' + attr_val,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldtype: 'Check'\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tresolve(f);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treject(\"Failed loading Attr Values: \" + attr);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet promises = [];\n\t\t\t\t\t\tfor (const attr of doc.attributes) {\n\t\t\t\t\t\t\t// for each attribute, get Item Attribute values and use it for fields\n\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\tfn(attr.attribute)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tattrs.push(attr.attribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tfields_group = [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tSection Break\n\t\t\t\t\t\t\t\tCheckbox\n\t\t\t\t\t\t\t\tCheckbox ...\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tSection Break\n\t\t\t\t\t\t\t\tCheckbox\n\t\t\t\t\t\t\t\tCheckbox ...\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tPromise.all(promises)\n\t\t\t\t\t\t.then((fields_group) => {\n\t\t\t\t\t\t\tlet fields = [];\n\t\t\t\t\t\t\tfor (const fg of fields_group) {\n\t\t\t\t\t\t\t\tfields.push(...fg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\trcore.bus.post('show_dialog', {\n\t\t\t\t\t\t\t\tfields: fields,\n\t\t\t\t\t\t\t\tid: 'item_form_create_single_variant_dialog',\n\t\t\t\t\t\t\t\ttitle: 'Create Multiple Variant',\n\t\t\t\t\t\t\t\tprimary_button: {\n\t\t\t\t\t\t\t\t\tlabel: 'Create',\n\t\t\t\t\t\t\t\t\tonclick: (core, doc, close_dialog) => {\n\t\t\t\t\t\t\t\t\t\t// doc has the values\n\t\t\t\t\t\t\t\t\t\t// check if similar variant with values exists\n\t\t\t\t\t\t\t\t\t\t// else proceed making\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tconst _args = {};\n\t\t\t\t\t\t\t\t\t\tfor (const key in doc) {\n\t\t\t\t\t\t\t\t\t\t\tif (key.indexOf('|') > 0 && doc[key]) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst s = key.split('|'); // [\"Color\", \"Red\"]\n\t\t\t\t\t\t\t\t\t\t\t\tif (attrs.indexOf(s[0]) < 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t_args[s[0]] = _args[s[0]] || [];\n\t\t\t\t\t\t\t\t\t\t\t\t_args[s[0]].push(s[1]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// now loop through all attr and check if there is a value\n\t\t\t\t\t\t\t\t\t\tfor (const attr of attrs) {\n\t\t\t\t\t\t\t\t\t\t\tif (!_args[attr] || _args[attr].length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please select atleast one Option from each attribute group.<br>You are missing ' + attr,\n\t\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t\t\t\t\t\tshowSpinner();\n\t\t\t\t\t\t\t\t\t\tcore.call(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// TODO: Write test cases for these parameters & fn\n\t\t\t\t\t\t\t\t\t\t\t\tcmd: \"erpnext.controllers.item_variant.enqueue_multiple_variant_creation\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"item\": _parentDoc.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\"args\": JSON.stringify(_args)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t).then((response) => {\n\t\t\t\t\t\t\t\t\t\t\thideSpinner();\n\t\t\t\t\t\t\t\t\t\t\tif (!response.success) {\n\t\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Something went wrong while creating the variants, please try again',\n\t\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject([\"Failed Multiple Variants Queueing\", response]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclose_dialog();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Variant creation has been enqueued on the server. Please check back after few seconds',\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: 'green'\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch(r => {\n\t\t\t\t\t\t\t\t\t\t\tconsoleWarn(r);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tclose_button: {\n\t\t\t\t\t\t\t\t\tlabel: 'Cancel'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((r) => {\n\t\t\t\t\t\t\tcore.messages.next({\n\t\t\t\t\t\t\t\tmessage: 'Failed loading variants data<br>' + r,\n\t\t\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconsoleWarn(r);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n    });\n}",
                    "name": "Item - Create Multiple Variants"
                },
                {
                    "code": "(core) => {\n    core.scriptManager.addEvents(\"Item\", {\n        list_setup: (core) => {\n\n            core.bus.post(\"list_row_status\", {\n                fn: (core, doc) => {\n                    if (doc.disabled) {\n                        return {text: \"Disabled\", indicator: \"grey\"};\n                    } else if (doc.end_of_life && new Date(doc.end_of_life) < new Date()) {\n                        return {text: \"Expired\", indicator: \"grey\"};\n                    } else if (doc.has_variants) {\n                        return {text: \"Template\", indicator: \"orange\"};\n                    } else if (doc.variant_of) {\n                        return {text: \"Variant\", indicator: \"green\"};\n                    } else {\n\t\t\t\t\t\treturn {text: \"Enabled\", indicator: \"blue\"}\n\t\t\t\t\t}\n                },\n                include_fields: [\n                    \"item_name\", \"stock_uom\", \"item_group\",\n                    \"image\", \"variant_of\", \"has_variants\",\n                    \"end_of_life\", \"disabled\"\n                ]\n            });\n        }\n    });\n}",
                    "name": "Item - Row Status"
                },
                {
                    "code": "// ItemList - Show Variants checkbox\n(core) => {\n    core.scriptManager.addEvents(\"Item\", {\n\t\tlist_setup: (core) => {\n\n            core.bus.post(\"list_custom_filter\",\n                {\n                    field: {\n                        fieldname: \"show_variants\",\n                        label: \"Show Variants\",\n                        fieldtype: \"Check\",\n                        default: 1\n                    },\n                    handler: (filters, value) => {\n\t\t\tif (filters[\"variant_of\"] && !value) {\n\t\t\t\tcore.messages.next(\"Please apply Variant of filter while Show Variants checked\");\n\t\t\t}\n\n\t\t\tif (!value) {\n\t\t\t\tfilters[\"variant_of\"] = '';\n\t\t\t}\n                    }\n                }\n            );\n        }\n\t});\n}",
                    "name": "ItemList - Show Variants checkbox"
                }
            ]
        },
        "rawHeaders": [
            "Date",
            "Thu, 16 May 2019 08:07:42 GMT",
            "Content-Type",
            "application/json",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "Vary",
            "Accept-Encoding",
            "Set-Cookie",
            "user_image=; Path=/",
            "Set-Cookie",
            "user_id=test%40test.com; Path=/",
            "Set-Cookie",
            "system_user=yes; Path=/",
            "Set-Cookie",
            "full_name=Test%20User; Path=/",
            "Set-Cookie",
            "sid=274c4c79f0c1be959e673dce8cec1d680bf4b2308f3818a962a4f8ed; Expires=Sun, 19-May-2019 10:07:42 GMT; Path=/",
            "Access-Control-Allow-Credentials",
            "true",
            "Access-Control-Allow-Methods",
            "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers",
            "Origin, X-Requested-With, Content-Type, Accept, x-client-site",
            "Server",
            "cloudflare",
            "CF-RAY",
            "4d7bdc099ff9d3c3-JIB"
        ]
    },
    {
        "scope": "http://v11-test-erp.leam.ae:80",
        "method": "get",
        "path": "/api/method/renovation/doc/Item/Item%20A",
        "body": "",
        "status": 200,
        "response": {
            "status": "success",
            "data": {
                "website_specifications": [],
                "enable_deferred_expense": 0,
                "disabled": 0,
                "assign_employee": 1,
                "reorder_levels": [],
                "modified_by": "test@test.com",
                "item_name": "Item A TEST",
                "website_warehouse": null,
                "contract_expiry_value": 0,
                "has_expiry_date": 0,
                "hub_category_to_publish": null,
                "default_material_request_type": "Purchase",
                "image": null,
                "contract_terms": null,
                "website_item_groups": [],
                "max_discount": 0,
                "name": "Item A",
                "contract_type": "Service Contract",
                "item_group": "Consumable",
                "hub_warehouse": null,
                "weight_per_unit": 0,
                "tax_code": null,
                "web_long_description": null,
                "renovation_pos_options": [
                    {
                        "modified_by": "test@test.com",
                        "name": "23cf3532bb",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.310740",
                        "modified": "2019-05-16 01:05:59.018204",
                        "item_code": "TEST ITEM",
                        "qty": 0,
                        "idx": 1,
                        "parenttype": "Item",
                        "change_qty_with_parent": 0,
                        "doctype": "Renovation POS Option",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "rate": 0,
                        "uom": null,
                        "parentfield": "renovation_pos_options"
                    },
                    {
                        "modified_by": "test@test.com",
                        "name": "87aa0e2f34",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.310740",
                        "modified": "2019-05-16 01:05:59.018204",
                        "item_code": "Item A",
                        "qty": 0,
                        "idx": 2,
                        "parenttype": "Item",
                        "change_qty_with_parent": 0,
                        "doctype": "Renovation POS Option",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "rate": 0,
                        "uom": null,
                        "parentfield": "renovation_pos_options"
                    }
                ],
                "quality_inspection_template": null,
                "parentfield": null,
                "is_contract_item": 0,
                "creation": "2019-04-28 14:46:26.310740",
                "doctype": "Item",
                "owner": "test@test.com",
                "variant_of": null,
                "taxes": [],
                "create_new_batch": 0,
                "has_variants": 0,
                "supplier_items": [],
                "enable_deferred_revenue": 0,
                "inspection_required_before_delivery": 0,
                "is_sales_item": 1,
                "is_sub_contracted_item": 0,
                "shelf_life_in_days": 0,
                "tolerance": 0,
                "thumbnail": "/files/XDZZy_small.png",
                "customer_code": "",
                "parent": null,
                "deferred_revenue_account": null,
                "is_stock_item": 1,
                "manufacturer": null,
                "idx": 2,
                "variant_based_on": "Item Attribute",
                "route": "consumable/item-a-test-dspmi",
                "min_order_qty": 0,
                "valuation_rate": 20,
                "attributes": [],
                "asset_naming_series": null,
                "batch_number_series": null,
                "hub_sync_id": null,
                "renovation_service_by": null,
                "customer_items": [],
                "barcodes": [],
                "country_of_origin": "United Arab Emirates",
                "contract_questionnaire_template": null,
                "item_defaults": [
                    {
                        "selling_cost_center": null,
                        "modified_by": "test@test.com",
                        "name": "47b9614845",
                        "parent": "Item A",
                        "income_account": "Sales Account - TC",
                        "company": "Test Company",
                        "creation": "2019-04-28 14:46:26.351895",
                        "modified": "2019-05-16 01:05:59.018204",
                        "buying_cost_center": null,
                        "expense_account": null,
                        "idx": 1,
                        "parenttype": "Item",
                        "default_price_list": null,
                        "doctype": "Item Default",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "default_warehouse": null,
                        "default_supplier": null,
                        "parentfield": "item_defaults"
                    }
                ],
                "is_item_from_hub": 0,
                "valuation_method": "",
                "brand": null,
                "purchase_uom": null,
                "item_code": "Item A",
                "retain_sample": 0,
                "show_in_website": 1,
                "is_purchase_item": 1,
                "safety_stock": 0,
                "weight_uom": null,
                "modified": "2019-05-16 01:05:59.018204",
                "warranty_period": null,
                "manufacturer_part_no": null,
                "customs_tariff_number": null,
                "delivered_by_supplier": 0,
                "contract_expiry_unit": "",
                "uoms": [
                    {
                        "modified_by": "test@test.com",
                        "name": "0e2187698c",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.351048",
                        "modified": "2019-05-16 01:05:59.018204",
                        "doctype": "UOM Conversion Detail",
                        "idx": 1,
                        "parenttype": "Item",
                        "conversion_factor": 1,
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "uom": "Nos",
                        "parentfield": "uoms"
                    }
                ],
                "last_purchase_rate": 0,
                "naming_series": "STO-ITEM-.YYYY.-",
                "website_image": "/files/XDZZy.png",
                "renovation_service_duration": 0,
                "publish_in_hub": 0,
                "parenttype": null,
                "serial_no_series": null,
                "allow_alternative_item": 0,
                "include_item_in_manufacturing": 1,
                "no_of_months": 0,
                "end_of_life": "2099-12-06",
                "synced_with_hub": 0,
                "stock_uom": "Nos",
                "show_variant_in_website": 0,
                "contract_qty": 1,
                "docstatus": 0,
                "sample_quantity": 0,
                "description": "<div>ASDASD</div><div>ASDASDASDASD</div>",
                "sales_uom": null,
                "slideshow": null,
                "deferred_expense_account": null,
                "asset_category": null,
                "default_bom": null,
                "weightage": 0,
                "no_of_months_exp": 0,
                "total_projected_qty": 0,
                "renovation_commission_rate": 0,
                "lead_time_days": 0,
                "opening_stock": 200,
                "has_batch_no": 0,
                "has_serial_no": 0,
                "standard_rate": 0,
                "is_fixed_asset": 0,
                "inspection_required_before_purchase": 0
            }
        },
        "rawHeaders": [
            "Date",
            "Thu, 16 May 2019 08:07:42 GMT",
            "Content-Type",
            "application/json",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "Vary",
            "Accept-Encoding",
            "Set-Cookie",
            "user_image=; Path=/",
            "Set-Cookie",
            "user_id=test%40test.com; Path=/",
            "Set-Cookie",
            "system_user=yes; Path=/",
            "Set-Cookie",
            "full_name=Test%20User; Path=/",
            "Set-Cookie",
            "sid=274c4c79f0c1be959e673dce8cec1d680bf4b2308f3818a962a4f8ed; Expires=Sun, 19-May-2019 10:07:42 GMT; Path=/",
            "Access-Control-Allow-Credentials",
            "true",
            "Access-Control-Allow-Methods",
            "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers",
            "Origin, X-Requested-With, Content-Type, Accept, x-client-site",
            "Server",
            "cloudflare",
            "CF-RAY",
            "4d7bdc098febd3c3-JIB"
        ]
    },
    {
        "scope": "http://v11-test-erp.leam.ae:80",
        "method": "post",
        "path": "/",
        "body": {
            "doc": {
                "doctype": "Item",
                "website_specifications": [],
                "enable_deferred_expense": 0,
                "disabled": 0,
                "assign_employee": 1,
                "reorder_levels": [],
                "modified_by": "test@test.com",
                "item_name": "Item A TEST",
                "website_warehouse": null,
                "contract_expiry_value": 0,
                "has_expiry_date": 0,
                "hub_category_to_publish": null,
                "default_material_request_type": "Purchase",
                "image": null,
                "contract_terms": null,
                "website_item_groups": [],
                "max_discount": 0,
                "name": "Item A",
                "contract_type": "Service Contract",
                "item_group": "Consumable",
                "hub_warehouse": null,
                "weight_per_unit": 0,
                "tax_code": null,
                "web_long_description": null,
                "renovation_pos_options": [
                    {
                        "modified_by": "test@test.com",
                        "name": "23cf3532bb",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.310740",
                        "modified": "2019-05-16 01:05:59.018204",
                        "item_code": "TEST ITEM",
                        "qty": 0,
                        "idx": 1,
                        "parenttype": "Item",
                        "change_qty_with_parent": 0,
                        "doctype": "Renovation POS Option",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "rate": 0,
                        "uom": null,
                        "parentfield": "renovation_pos_options"
                    },
                    {
                        "modified_by": "test@test.com",
                        "name": "87aa0e2f34",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.310740",
                        "modified": "2019-05-16 01:05:59.018204",
                        "item_code": "Item A",
                        "qty": 0,
                        "idx": 2,
                        "parenttype": "Item",
                        "change_qty_with_parent": 0,
                        "doctype": "Renovation POS Option",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "rate": 0,
                        "uom": null,
                        "parentfield": "renovation_pos_options"
                    }
                ],
                "quality_inspection_template": null,
                "parentfield": null,
                "is_contract_item": 0,
                "creation": "2019-04-28 14:46:26.310740",
                "owner": "test@test.com",
                "variant_of": null,
                "taxes": [],
                "create_new_batch": 0,
                "has_variants": 0,
                "supplier_items": [],
                "enable_deferred_revenue": 0,
                "inspection_required_before_delivery": 0,
                "is_sales_item": 1,
                "is_sub_contracted_item": 0,
                "shelf_life_in_days": 0,
                "tolerance": 0,
                "thumbnail": "/files/XDZZy_small.png",
                "customer_code": "",
                "parent": null,
                "deferred_revenue_account": null,
                "is_stock_item": 1,
                "manufacturer": null,
                "idx": 2,
                "variant_based_on": "Item Attribute",
                "route": "consumable/item-a-test-dspmi",
                "min_order_qty": 0,
                "valuation_rate": 20,
                "attributes": [],
                "asset_naming_series": null,
                "batch_number_series": null,
                "hub_sync_id": null,
                "renovation_service_by": null,
                "customer_items": [],
                "barcodes": [],
                "country_of_origin": "United Arab Emirates",
                "contract_questionnaire_template": null,
                "item_defaults": [
                    {
                        "selling_cost_center": null,
                        "modified_by": "test@test.com",
                        "name": "47b9614845",
                        "parent": "Item A",
                        "income_account": "Sales Account - TC",
                        "company": "Test Company",
                        "creation": "2019-04-28 14:46:26.351895",
                        "modified": "2019-05-16 01:05:59.018204",
                        "buying_cost_center": null,
                        "expense_account": null,
                        "idx": 1,
                        "parenttype": "Item",
                        "default_price_list": null,
                        "doctype": "Item Default",
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "default_warehouse": null,
                        "default_supplier": null,
                        "parentfield": "item_defaults"
                    }
                ],
                "is_item_from_hub": 0,
                "valuation_method": "",
                "brand": null,
                "purchase_uom": null,
                "item_code": "Item A",
                "retain_sample": 0,
                "show_in_website": 1,
                "is_purchase_item": 1,
                "safety_stock": 0,
                "weight_uom": null,
                "modified": "2019-05-16 01:05:59.018204",
                "warranty_period": null,
                "manufacturer_part_no": null,
                "customs_tariff_number": null,
                "delivered_by_supplier": 0,
                "contract_expiry_unit": "",
                "uoms": [
                    {
                        "modified_by": "test@test.com",
                        "name": "0e2187698c",
                        "parent": "Item A",
                        "creation": "2019-04-28 14:46:26.351048",
                        "modified": "2019-05-16 01:05:59.018204",
                        "doctype": "UOM Conversion Detail",
                        "idx": 1,
                        "parenttype": "Item",
                        "conversion_factor": 1,
                        "owner": "test@test.com",
                        "docstatus": 0,
                        "uom": "Nos",
                        "parentfield": "uoms"
                    }
                ],
                "last_purchase_rate": 0,
                "naming_series": "STO-ITEM-.YYYY.-",
                "website_image": "/files/XDZZy.png",
                "renovation_service_duration": 0,
                "publish_in_hub": 0,
                "parenttype": null,
                "serial_no_series": null,
                "allow_alternative_item": 0,
                "include_item_in_manufacturing": 1,
                "no_of_months": 0,
                "end_of_life": "2099-12-06",
                "synced_with_hub": 0,
                "stock_uom": "Nos",
                "show_variant_in_website": 0,
                "contract_qty": 1,
                "docstatus": 0,
                "sample_quantity": 0,
                "description": "<div>ASDASD</div><div>ASDASDASDASD</div>",
                "sales_uom": null,
                "slideshow": null,
                "deferred_expense_account": null,
                "asset_category": null,
                "default_bom": null,
                "weightage": 0,
                "no_of_months_exp": 0,
                "total_projected_qty": 0,
                "renovation_commission_rate": 0,
                "lead_time_days": 0,
                "opening_stock": 200,
                "has_batch_no": 0,
                "has_serial_no": 0,
                "standard_rate": 0,
                "is_fixed_asset": 0,
                "inspection_required_before_purchase": 0
            },
            "cmd": "frappe.client.submit"
        },
        "status": 403,
        "response": {
            "_error_message": "Insufficient Permission for Item",
            "exc": "[\"Traceback (most recent call last):\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/app.py\\\", line 61, in application\\n    response = frappe.handler.handle()\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/handler.py\\\", line 21, in handle\\n    data = execute_cmd(cmd)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/handler.py\\\", line 56, in execute_cmd\\n    return frappe.call(method, **frappe.form_dict)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py\\\", line 1027, in call\\n    return fn(*args, **newargs)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/client.py\\\", line 216, in submit\\n    doc.submit()\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 848, in submit\\n    self._submit()\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 837, in _submit\\n    self.save()\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 260, in save\\n    return self._save(*args, **kwargs)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 290, in _save\\n    self.check_if_latest()\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 635, in check_if_latest\\n    self.check_docstatus_transition(tmp.docstatus)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 662, in check_docstatus_transition\\n    self.check_permission(\\\"submit\\\")\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 172, in check_permission\\n    self.raise_no_permission_to(permlevel or permtype)\\n  File \\\"/home/frappe/frappe-bench/apps/frappe/frappe/model/document.py\\\", line 186, in raise_no_permission_to\\n    raise frappe.PermissionError\\nPermissionError\\n\"]",
            "_server_messages": "[\"{\\\"message\\\": \\\"User do not have document access\\\"}\"]"
        },
        "rawHeaders": [
            "Date",
            "Thu, 16 May 2019 08:07:45 GMT",
            "Content-Type",
            "application/json",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "Vary",
            "Accept-Encoding",
            "Set-Cookie",
            "user_image=; Path=/",
            "Set-Cookie",
            "user_id=test%40test.com; Path=/",
            "Set-Cookie",
            "system_user=yes; Path=/",
            "Set-Cookie",
            "full_name=Test%20User; Path=/",
            "Set-Cookie",
            "sid=274c4c79f0c1be959e673dce8cec1d680bf4b2308f3818a962a4f8ed; Expires=Sun, 19-May-2019 10:07:45 GMT; Path=/",
            "Access-Control-Allow-Credentials",
            "true",
            "Access-Control-Allow-Methods",
            "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers",
            "Origin, X-Requested-With, Content-Type, Accept, x-client-site",
            "Server",
            "cloudflare",
            "CF-RAY",
            "4d7bdc0bcc12d3df-JIB"
        ]
    }
]